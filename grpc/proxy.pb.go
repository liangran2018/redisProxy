// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy.proto

/*
Package proxy is a generated protocol buffer package.

It is generated from these files:
	proxy.proto

It has these top-level messages:
	GetRequest
	GetResponse
	SetRequest
	SetResponse
	HgetRequest
	HgetResponse
	HsetRequest
	HsetResponse
	HmgetRequest
	HmgetResponse
	HmsetRequest
	HmsetResponse
*/
package proxy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Get
type GetRequest struct {
	Table       string `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Key         []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	ForceMaster bool   `protobuf:"varint,3,opt,name=forceMaster" json:"forceMaster,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetRequest) GetForceMaster() bool {
	if m != nil {
		return m.ForceMaster
	}
	return false
}

type GetResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GetResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Set
type SetRequest struct {
	Table string `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Time  int32  `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *SetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SetRequest) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type SetResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SetResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Hget
type HgetRequest struct {
	Table       string `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Key         []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Field       []byte `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	ForceMaster bool   `protobuf:"varint,4,opt,name=forceMaster" json:"forceMaster,omitempty"`
}

func (m *HgetRequest) Reset()                    { *m = HgetRequest{} }
func (m *HgetRequest) String() string            { return proto.CompactTextString(m) }
func (*HgetRequest) ProtoMessage()               {}
func (*HgetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HgetRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *HgetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HgetRequest) GetField() []byte {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *HgetRequest) GetForceMaster() bool {
	if m != nil {
		return m.ForceMaster
	}
	return false
}

type HgetResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *HgetResponse) Reset()                    { *m = HgetResponse{} }
func (m *HgetResponse) String() string            { return proto.CompactTextString(m) }
func (*HgetResponse) ProtoMessage()               {}
func (*HgetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HgetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HgetResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HgetResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Hset
type HsetRequest struct {
	Table string `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Field []byte `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *HsetRequest) Reset()                    { *m = HsetRequest{} }
func (m *HsetRequest) String() string            { return proto.CompactTextString(m) }
func (*HsetRequest) ProtoMessage()               {}
func (*HsetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HsetRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *HsetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HsetRequest) GetField() []byte {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *HsetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type HsetResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HsetResponse) Reset()                    { *m = HsetResponse{} }
func (m *HsetResponse) String() string            { return proto.CompactTextString(m) }
func (*HsetResponse) ProtoMessage()               {}
func (*HsetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HsetResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HsetResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Hmget
type HmgetRequest struct {
	Table       string   `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Key         []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Fields      [][]byte `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	ForceMaster bool     `protobuf:"varint,4,opt,name=forceMaster" json:"forceMaster,omitempty"`
}

func (m *HmgetRequest) Reset()                    { *m = HmgetRequest{} }
func (m *HmgetRequest) String() string            { return proto.CompactTextString(m) }
func (*HmgetRequest) ProtoMessage()               {}
func (*HmgetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HmgetRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *HmgetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HmgetRequest) GetFields() [][]byte {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *HmgetRequest) GetForceMaster() bool {
	if m != nil {
		return m.ForceMaster
	}
	return false
}

type HmgetResponse struct {
	Value [][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Code  int32    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Msg   string   `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *HmgetResponse) Reset()                    { *m = HmgetResponse{} }
func (m *HmgetResponse) String() string            { return proto.CompactTextString(m) }
func (*HmgetResponse) ProtoMessage()               {}
func (*HmgetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HmgetResponse) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HmgetResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HmgetResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Hmset
type HmsetRequest struct {
	Table  string            `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Key    []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Values map[string][]byte `protobuf:"bytes,3,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HmsetRequest) Reset()                    { *m = HmsetRequest{} }
func (m *HmsetRequest) String() string            { return proto.CompactTextString(m) }
func (*HmsetRequest) ProtoMessage()               {}
func (*HmsetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HmsetRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *HmsetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HmsetRequest) GetValues() map[string][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type HmsetResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HmsetResponse) Reset()                    { *m = HmsetResponse{} }
func (m *HmsetResponse) String() string            { return proto.CompactTextString(m) }
func (*HmsetResponse) ProtoMessage()               {}
func (*HmsetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *HmsetResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HmsetResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "proxy.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "proxy.GetResponse")
	proto.RegisterType((*SetRequest)(nil), "proxy.SetRequest")
	proto.RegisterType((*SetResponse)(nil), "proxy.SetResponse")
	proto.RegisterType((*HgetRequest)(nil), "proxy.HgetRequest")
	proto.RegisterType((*HgetResponse)(nil), "proxy.HgetResponse")
	proto.RegisterType((*HsetRequest)(nil), "proxy.HsetRequest")
	proto.RegisterType((*HsetResponse)(nil), "proxy.HsetResponse")
	proto.RegisterType((*HmgetRequest)(nil), "proxy.HmgetRequest")
	proto.RegisterType((*HmgetResponse)(nil), "proxy.HmgetResponse")
	proto.RegisterType((*HmsetRequest)(nil), "proxy.HmsetRequest")
	proto.RegisterType((*HmsetResponse)(nil), "proxy.HmsetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Hget(ctx context.Context, in *HgetRequest, opts ...grpc.CallOption) (*HgetResponse, error)
	Hset(ctx context.Context, in *HsetRequest, opts ...grpc.CallOption) (*HsetResponse, error)
	Hmget(ctx context.Context, in *HmgetRequest, opts ...grpc.CallOption) (*HmgetResponse, error)
	Hmset(ctx context.Context, in *HmsetRequest, opts ...grpc.CallOption) (*HmsetResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/proxy.Service/get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/proxy.Service/set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Hget(ctx context.Context, in *HgetRequest, opts ...grpc.CallOption) (*HgetResponse, error) {
	out := new(HgetResponse)
	err := grpc.Invoke(ctx, "/proxy.Service/hget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Hset(ctx context.Context, in *HsetRequest, opts ...grpc.CallOption) (*HsetResponse, error) {
	out := new(HsetResponse)
	err := grpc.Invoke(ctx, "/proxy.Service/hset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Hmget(ctx context.Context, in *HmgetRequest, opts ...grpc.CallOption) (*HmgetResponse, error) {
	out := new(HmgetResponse)
	err := grpc.Invoke(ctx, "/proxy.Service/hmget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Hmset(ctx context.Context, in *HmsetRequest, opts ...grpc.CallOption) (*HmsetResponse, error) {
	out := new(HmsetResponse)
	err := grpc.Invoke(ctx, "/proxy.Service/hmset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Hget(context.Context, *HgetRequest) (*HgetResponse, error)
	Hset(context.Context, *HsetRequest) (*HsetResponse, error)
	Hmget(context.Context, *HmgetRequest) (*HmgetResponse, error)
	Hmset(context.Context, *HmsetRequest) (*HmsetResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Service/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Hget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Hget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Service/Hget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Hget(ctx, req.(*HgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Hset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Hset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Service/Hset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Hset(ctx, req.(*HsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Hmget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Hmget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Service/Hmget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Hmget(ctx, req.(*HmgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Hmset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Hmset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Service/Hmset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Hmset(ctx, req.(*HmsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _Service_Get_Handler,
		},
		{
			MethodName: "set",
			Handler:    _Service_Set_Handler,
		},
		{
			MethodName: "hget",
			Handler:    _Service_Hget_Handler,
		},
		{
			MethodName: "hset",
			Handler:    _Service_Hset_Handler,
		},
		{
			MethodName: "hmget",
			Handler:    _Service_Hmget_Handler,
		},
		{
			MethodName: "hmset",
			Handler:    _Service_Hmset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0x66, 0x6d, 0x27, 0xd0, 0xb1, 0x91, 0x60, 0xa9, 0x90, 0x95, 0x0b, 0x96, 0x4f, 0x39, 0xad,
	0x44, 0x1f, 0xe2, 0x71, 0x44, 0x42, 0x04, 0x10, 0x12, 0xb2, 0xa5, 0x1e, 0x91, 0x5c, 0x77, 0x92,
	0x46, 0xc4, 0x0f, 0x76, 0xb6, 0x85, 0xdc, 0xf8, 0x3d, 0xfc, 0x05, 0xfe, 0x1c, 0xda, 0xdd, 0x24,
	0xdd, 0x6d, 0x7a, 0x20, 0x51, 0x6f, 0x33, 0xe3, 0xf9, 0x1e, 0xfe, 0xec, 0x5d, 0x88, 0x7b, 0xd9,
	0xfd, 0x5a, 0x8a, 0x5e, 0x76, 0xaa, 0xe3, 0x03, 0xd3, 0xe4, 0x67, 0x00, 0x1f, 0x50, 0x15, 0xf8,
	0xe3, 0x0a, 0x49, 0xf1, 0x43, 0x18, 0xa8, 0xea, 0x7c, 0x81, 0x29, 0xcb, 0xd8, 0xf8, 0xa0, 0xb0,
	0x0d, 0x7f, 0x02, 0xe1, 0x77, 0x5c, 0xa6, 0x41, 0xc6, 0xc6, 0x49, 0xa1, 0x4b, 0x9e, 0x41, 0x3c,
	0xed, 0x64, 0x8d, 0x5f, 0x2a, 0x52, 0x28, 0xd3, 0x30, 0x63, 0xe3, 0x47, 0x85, 0x3b, 0xca, 0x3f,
	0x42, 0x6c, 0x78, 0xa9, 0xef, 0x5a, 0x42, 0x4d, 0x7c, 0x5d, 0x2d, 0xae, 0x2c, 0x71, 0x52, 0xd8,
	0x86, 0x73, 0x88, 0xea, 0xee, 0x02, 0x0d, 0xf3, 0xa0, 0x30, 0xb5, 0x16, 0x6b, 0x68, 0x66, 0x28,
	0x0f, 0x0a, 0x5d, 0xe6, 0xdf, 0x00, 0xca, 0xdd, 0x2d, 0x6e, 0x14, 0xc3, 0x5b, 0x8a, 0x6a, 0xde,
	0x60, 0x1a, 0x59, 0x45, 0x5d, 0xe7, 0xc7, 0x10, 0x97, 0x8e, 0xd5, 0xb5, 0x29, 0xb6, 0x6d, 0x2a,
	0xb8, 0x31, 0xd5, 0x40, 0x3c, 0x99, 0xed, 0xe5, 0x6a, 0x3a, 0xc7, 0xc5, 0xc5, 0xda, 0x95, 0x69,
	0x6e, 0xc7, 0x19, 0x6d, 0xc7, 0xf9, 0x09, 0x12, 0x2b, 0x77, 0x0f, 0x79, 0x56, 0x10, 0x4f, 0xe8,
	0xbe, 0xac, 0x6f, 0x8c, 0x44, 0x8e, 0x91, 0xfc, 0x04, 0x12, 0x2b, 0xb1, 0x53, 0xa6, 0x3d, 0x24,
	0x93, 0x66, 0x8f, 0x50, 0x9f, 0xc3, 0xd0, 0x98, 0xa1, 0x34, 0xcc, 0xc2, 0x71, 0x52, 0xac, 0xba,
	0xff, 0x88, 0xf5, 0x33, 0x3c, 0x5e, 0x29, 0x6e, 0xe7, 0x1a, 0xee, 0x9a, 0xeb, 0x1f, 0xa6, 0xfd,
	0xef, 0x91, 0xec, 0x2b, 0x18, 0x1a, 0x1d, 0xeb, 0x3f, 0x3e, 0x7a, 0x21, 0xec, 0x41, 0x75, 0xc9,
	0xc4, 0x99, 0xd9, 0x78, 0xdf, 0x2a, 0xb9, 0x2c, 0x56, 0xeb, 0xa3, 0x37, 0x10, 0x3b, 0xe3, 0x35,
	0xb3, 0x55, 0xf3, 0x0f, 0x41, 0xe0, 0x7c, 0x9d, 0xb7, 0xc1, 0x6b, 0x96, 0x9f, 0xea, 0x37, 0xdf,
	0xf9, 0x13, 0x1d, 0xfd, 0x0d, 0xe0, 0x61, 0x89, 0xf2, 0x7a, 0x5e, 0x23, 0x17, 0x10, 0xce, 0x50,
	0xf1, 0xa7, 0x2b, 0xb7, 0x37, 0xd7, 0xc8, 0x88, 0xbb, 0x23, 0xcb, 0x9f, 0x3f, 0xd0, 0xfb, 0xe4,
	0xec, 0x97, 0xdb, 0xfb, 0xa5, 0xb7, 0xff, 0x12, 0xa2, 0x4b, 0x2d, 0xb0, 0x7e, 0xea, 0x9c, 0xb7,
	0xd1, 0x33, 0x6f, 0xe6, 0x41, 0xc8, 0x85, 0xd0, 0x1d, 0x10, 0xf2, 0x20, 0x27, 0x30, 0xb8, 0xd4,
	0xbf, 0x00, 0xdf, 0x3c, 0x77, 0x7e, 0xc1, 0xd1, 0xa1, 0x3f, 0xf4, 0x51, 0xe4, 0xa1, 0xe8, 0x2e,
	0x94, 0xa7, 0xf5, 0xee, 0x14, 0x44, 0xdd, 0x35, 0xa2, 0x45, 0x85, 0x15, 0xa1, 0x68, 0xf1, 0x27,
	0x09, 0x89, 0xb5, 0x1e, 0x36, 0x5d, 0x2b, 0x66, 0xb2, 0xaf, 0x05, 0x29, 0x89, 0x55, 0x43, 0x62,
	0x3e, 0xad, 0x6a, 0xfc, 0xca, 0x7e, 0x33, 0x76, 0x3e, 0x34, 0x37, 0xf6, 0xf1, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x72, 0xca, 0x6c, 0x25, 0xc0, 0x05, 0x00, 0x00,
}
