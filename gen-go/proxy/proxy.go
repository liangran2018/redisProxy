// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Table
//  - Key
//  - ForceMaster
type GetRequest struct {
  Table string `thrift:"table,1" db:"table" json:"table"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
  ForceMaster bool `thrift:"forceMaster,3" db:"forceMaster" json:"forceMaster"`
}

func NewGetRequest() *GetRequest {
  return &GetRequest{}
}


func (p *GetRequest) GetTable() string {
  return p.Table
}

func (p *GetRequest) GetKey() []byte {
  return p.Key
}

func (p *GetRequest) GetForceMaster() bool {
  return p.ForceMaster
}
func (p *GetRequest) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *GetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *GetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *GetRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ForceMaster = v
}
  return nil
}

func (p *GetRequest) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *GetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteString(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }

  return err
}

func (p *GetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }

  return err
}

func (p *GetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("forceMaster", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:forceMaster: ", p), err) }
  if err := oprot.WriteBool(p.ForceMaster); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forceMaster (3) field write error: ", p), err) }

  return err
}

func (p *GetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Code
//  - Msg
type GetResponse struct {
  Value []byte `thrift:"value,1" db:"value" json:"value"`
  Code int32 `thrift:"code,2" db:"code" json:"code"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewGetResponse() *GetResponse {
  return &GetResponse{}
}


func (p *GetResponse) GetValue() []byte {
  return p.Value
}

func (p *GetResponse) GetCode() int32 {
  return p.Code
}

func (p *GetResponse) GetMsg() string {
  return p.Msg
}
func (p *GetResponse) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *GetResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *GetResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *GetResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *GetResponse) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *GetResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }

  return err
}

func (p *GetResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteI32(p.Code); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }

  return err
}

func (p *GetResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(p.Msg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }

  return err
}

func (p *GetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResponse(%+v)", *p)
}

// Attributes:
//  - Table
//  - Key
//  - Value
//  - Time
type SetRequest struct {
  Table string `thrift:"table,1" db:"table" json:"table"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
  Time int32 `thrift:"time,4" db:"time" json:"time"`
}

func NewSetRequest() *SetRequest {
  return &SetRequest{}
}


func (p *SetRequest) GetTable() string {
  return p.Table
}

func (p *SetRequest) GetKey() []byte {
  return p.Key
}

func (p *SetRequest) GetValue() []byte {
  return p.Value
}

func (p *SetRequest) GetTime() int32 {
  return p.Time
}
func (p *SetRequest) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *SetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *SetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SetRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *SetRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *SetRequest) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *SetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteString(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }

  return err
}

func (p *SetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }

  return err
}

func (p *SetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }

  return err
}

func (p *SetRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:time: ", p), err) }
  if err := oprot.WriteI32(p.Time); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (4) field write error: ", p), err) }

  return err
}

func (p *SetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
type SetResponse struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewSetResponse() *SetResponse {
  return &SetResponse{}
}


func (p *SetResponse) GetCode() int32 {
  return p.Code
}

func (p *SetResponse) GetMsg() string {
  return p.Msg
}
func (p *SetResponse) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *SetResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *SetResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *SetResponse) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *SetResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(p.Code); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }

  return err
}

func (p *SetResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(p.Msg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }

  return err
}

func (p *SetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetResponse(%+v)", *p)
}

// Attributes:
//  - Table
//  - Key
//  - Field
//  - ForceMaster
type HgetRequest struct {
  Table string `thrift:"table,1" db:"table" json:"table"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
  Field []byte `thrift:"field,3" db:"field" json:"field"`
  ForceMaster bool `thrift:"forceMaster,4" db:"forceMaster" json:"forceMaster"`
}

func NewHgetRequest() *HgetRequest {
  return &HgetRequest{}
}

func (p *HgetRequest) GetTable() string {
  return p.Table
}

func (p *HgetRequest) GetKey() []byte {
  return p.Key
}

func (p *HgetRequest) GetField() []byte {
  return p.Field
}

func (p *HgetRequest) GetForceMaster() bool {
  return p.ForceMaster
}
func (p *HgetRequest) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HgetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *HgetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HgetRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Field = v
}
  return nil
}

func (p *HgetRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ForceMaster = v
}
  return nil
}

func (p *HgetRequest) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HgetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteString(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }

  return err
}

func (p *HgetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }

  return err
}

func (p *HgetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:field: ", p), err) }
  if err := oprot.WriteBinary(p.Field); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (3) field write error: ", p), err) }

  return err
}

func (p *HgetRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("forceMaster", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:forceMaster: ", p), err) }
  if err := oprot.WriteBool(p.ForceMaster); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forceMaster (4) field write error: ", p), err) }

  return err
}

func (p *HgetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HgetRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Code
//  - Msg
type HgetResponse struct {
  Value []byte `thrift:"value,1" db:"value" json:"value"`
  Code int32 `thrift:"code,2" db:"code" json:"code"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewHgetResponse() *HgetResponse {
  return &HgetResponse{}
}


func (p *HgetResponse) GetValue() []byte {
  return p.Value
}

func (p *HgetResponse) GetCode() int32 {
  return p.Code
}

func (p *HgetResponse) GetMsg() string {
  return p.Msg
}
func (p *HgetResponse) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HgetResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *HgetResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *HgetResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *HgetResponse) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HgetResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }

  return err
}

func (p *HgetResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteI32(p.Code); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }

  return err
}

func (p *HgetResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(p.Msg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }

  return err
}

func (p *HgetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HgetResponse(%+v)", *p)
}

// Attributes:
//  - Table
//  - Key
//  - Field
//  - Value
type HsetRequest struct {
  Table string `thrift:"table,1" db:"table" json:"table"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
  Field []byte `thrift:"field,3" db:"field" json:"field"`
  Value []byte `thrift:"value,4" db:"value" json:"value"`
}

func NewHsetRequest() *HsetRequest {
  return &HsetRequest{}
}


func (p *HsetRequest) GetTable() string {
  return p.Table
}

func (p *HsetRequest) GetKey() []byte {
  return p.Key
}

func (p *HsetRequest) GetField() []byte {
  return p.Field
}

func (p *HsetRequest) GetValue() []byte {
  return p.Value
}
func (p *HsetRequest) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HsetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *HsetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HsetRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Field = v
}
  return nil
}

func (p *HsetRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *HsetRequest) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteString(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }

  return err
}

func (p *HsetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }

  return err
}

func (p *HsetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:field: ", p), err) }
  if err := oprot.WriteBinary(p.Field); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (3) field write error: ", p), err) }

  return err
}

func (p *HsetRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }

  return err
}

func (p *HsetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HsetRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
type HsetResponse struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewHsetResponse() *HsetResponse {
  return &HsetResponse{}
}


func (p *HsetResponse) GetCode() int32 {
  return p.Code
}

func (p *HsetResponse) GetMsg() string {
  return p.Msg
}
func (p *HsetResponse) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HsetResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *HsetResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *HsetResponse) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(p.Code); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }

  return err
}

func (p *HsetResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(p.Msg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }

  return err
}

func (p *HsetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HsetResponse(%+v)", *p)
}

// Attributes:
//  - Table
//  - Key
//  - Fields
//  - ForceMaster
type HmgetRequest struct {
  Table string `thrift:"table,1" db:"table" json:"table"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
  Fields [][]byte `thrift:"fields,3" db:"fields" json:"fields"`
  ForceMaster bool `thrift:"forceMaster,4" db:"forceMaster" json:"forceMaster"`
}

func NewHmgetRequest() *HmgetRequest {
  return &HmgetRequest{}
}


func (p *HmgetRequest) GetTable() string {
  return p.Table
}

func (p *HmgetRequest) GetKey() []byte {
  return p.Key
}

func (p *HmgetRequest) GetFields() [][]byte {
  return p.Fields
}

func (p *HmgetRequest) GetForceMaster() bool {
  return p.ForceMaster
}
func (p *HmgetRequest) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HmgetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *HmgetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HmgetRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Fields = append(p.Fields, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HmgetRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ForceMaster = v
}
  return nil
}

func (p *HmgetRequest) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HmgetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteString(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }

  return err
}

func (p *HmgetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }

  return err
}

func (p *HmgetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }

  return err
}

func (p *HmgetRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("forceMaster", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:forceMaster: ", p), err) }
  if err := oprot.WriteBool(bool(p.ForceMaster)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forceMaster (4) field write error: ", p), err) }

  return err
}

func (p *HmgetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HmgetRequest(%+v)", *p)
}

// Attributes:
//  - Value
//  - Code
//  - Msg
type HmgetResponse struct {
  Value [][]byte `thrift:"value,1" db:"value" json:"value"`
  Code int32 `thrift:"code,2" db:"code" json:"code"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewHmgetResponse() *HmgetResponse {
  return &HmgetResponse{}
}


func (p *HmgetResponse) GetValue() [][]byte {
  return p.Value
}

func (p *HmgetResponse) GetCode() int32 {
  return p.Code
}

func (p *HmgetResponse) GetMsg() string {
  return p.Msg
}
func (p *HmgetResponse) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HmgetResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Value =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Value = append(p.Value, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HmgetResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *HmgetResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *HmgetResponse) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HmgetResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Value)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Value {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }

  return err
}

func (p *HmgetResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteI32(p.Code); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }

  return err
}

func (p *HmgetResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(p.Msg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }

  return err
}

func (p *HmgetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HmgetResponse(%+v)", *p)
}

// Attributes:
//  - Table
//  - Key
//  - Values
type HmsetRequest struct {
  Table string `thrift:"table,1" db:"table" json:"table"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
  Values map[string][]byte `thrift:"values,3" db:"values" json:"values"`
}

func NewHmsetRequest() *HmsetRequest {
  return &HmsetRequest{}
}


func (p *HmsetRequest) GetTable() string {
  return p.Table
}

func (p *HmsetRequest) GetKey() []byte {
  return p.Key
}

func (p *HmsetRequest) GetValues() map[string][]byte {
  return p.Values
}
func (p *HmsetRequest) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HmsetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *HmsetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *HmsetRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Values =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.Values[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HmsetRequest) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HmsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteString(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }

  return err
}

func (p *HmsetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }

  return err
}

func (p *HmsetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Values {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }

  return err
}

func (p *HmsetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HmsetRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
type HmsetResponse struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewHmsetResponse() *HmsetResponse {
  return &HmsetResponse{}
}


func (p *HmsetResponse) GetCode() int32 {
  return p.Code
}

func (p *HmsetResponse) GetMsg() string {
  return p.Msg
}
func (p *HmsetResponse) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *HmsetResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *HmsetResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *HmsetResponse) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *HmsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(p.Code); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }

  return err
}

func (p *HmsetResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(p.Msg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }

  return err
}

func (p *HmsetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HmsetResponse(%+v)", *p)
}

type Service interface {
  // Parameters:
  //  - Request
  GetUserFeature(ctx context.Context, request *GetRequest) (r *GetResponse, err error)
  // Parameters:
  //  - Request
  SetUserFeature(ctx context.Context, request *SetRequest) (r *SetResponse, err error)
  // Parameters:
  //  - Request
  HgetUserFeature(ctx context.Context, request *HgetRequest) (r *HgetResponse, err error)
  // Parameters:
  //  - Request
  HsetUserFeature(ctx context.Context, request *HsetRequest) (r *HsetResponse, err error)
  // Parameters:
  //  - Request
  HmgetUserFeatures(ctx context.Context, request *HmgetRequest) (r *HmgetResponse, err error)
  // Parameters:
  //  - Request
  HmsetUserFeatures(ctx context.Context, request *HmsetRequest) (r *HmsetResponse, err error)
}

type ServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewService instead
func NewServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServiceClient {
  return &ServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewService instead
func NewServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServiceClient {
  return &ServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewServiceClient(c thrift.TClient) *ServiceClient {
  return &ServiceClient{
    c: c,
  }
}

// Parameters:
//  - Request
func (p *ServiceClient) GetUserFeature(ctx context.Context, request *GetRequest) (r *GetResponse, err error) {
  var _args4 ServiceGetUserFeatureArgs
  _args4.Request = request
  var _result5 ServiceGetUserFeatureResult
  if err = p.c.Call(ctx, "getUserFeature", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ServiceClient) SetUserFeature(ctx context.Context, request *SetRequest) (r *SetResponse, err error) {
  var _args6 ServiceSetUserFeatureArgs
  _args6.Request = request
  var _result7 ServiceSetUserFeatureResult
  if err = p.c.Call(ctx, "setUserFeature", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ServiceClient) HgetUserFeature(ctx context.Context, request *HgetRequest) (r *HgetResponse, err error) {
  var _args8 ServiceHgetUserFeatureArgs
  _args8.Request = request
  var _result9 ServiceHgetUserFeatureResult
  if err = p.c.Call(ctx, "hgetUserFeature", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ServiceClient) HsetUserFeature(ctx context.Context, request *HsetRequest) (r *HsetResponse, err error) {
  var _args10 ServiceHsetUserFeatureArgs
  _args10.Request = request
  var _result11 ServiceHsetUserFeatureResult
  if err = p.c.Call(ctx, "hsetUserFeature", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ServiceClient) HmgetUserFeatures(ctx context.Context, request *HmgetRequest) (r *HmgetResponse, err error) {
  var _args12 ServiceHmgetUserFeaturesArgs
  _args12.Request = request
  var _result13 ServiceHmgetUserFeaturesResult
  if err = p.c.Call(ctx, "hmgetUserFeatures", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ServiceClient) HmsetUserFeatures(ctx context.Context, request *HmsetRequest) (r *HmsetResponse, err error) {
  var _args14 ServiceHmsetUserFeaturesArgs
  _args14.Request = request
  var _result15 ServiceHmsetUserFeaturesResult
  if err = p.c.Call(ctx, "hmsetUserFeatures", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

type ServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Service
}

func (p *ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewServiceProcessor(handler Service) *ServiceProcessor {

  self16 := &ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["getUserFeature"] = &serviceProcessorGetUserFeature{handler:handler}
  self16.processorMap["setUserFeature"] = &serviceProcessorSetUserFeature{handler:handler}
  self16.processorMap["hgetUserFeature"] = &serviceProcessorHgetUserFeature{handler:handler}
  self16.processorMap["hsetUserFeature"] = &serviceProcessorHsetUserFeature{handler:handler}
  self16.processorMap["hmgetUserFeatures"] = &serviceProcessorHmgetUserFeatures{handler:handler}
  self16.processorMap["hmsetUserFeatures"] = &serviceProcessorHmsetUserFeatures{handler:handler}
return self16
}

func (p *ServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x17.Write(oprot)
  oprot.Flush(ctx)
  return false, x17
}

type serviceProcessorGetUserFeature struct {
  handler Service
}

func (p *serviceProcessorGetUserFeature) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceGetUserFeatureArgs{}
  if err = args.Read(iprot); err != nil {
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserFeature", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.Flush(ctx)
    return false, err
  }

  var err2 error
  retval, _ := p.handler.GetUserFeature(ctx, args.Request)
  result := ServiceGetUserFeatureResult{Success:retval}

  if err2 = oprot.WriteMessageBegin("getUserFeature", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serviceProcessorSetUserFeature struct {
  handler Service
}

func (p *serviceProcessorSetUserFeature) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceSetUserFeatureArgs{}
  if err = args.Read(iprot); err != nil {
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setUserFeature", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.Flush(ctx)
    return false, err
  }

  var err2 error
  retval, _ := p.handler.SetUserFeature(ctx, args.Request)
  result := ServiceSetUserFeatureResult{Success:retval}

  if err2 = oprot.WriteMessageBegin("setUserFeature", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serviceProcessorHgetUserFeature struct {
  handler Service
}

func (p *serviceProcessorHgetUserFeature) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceHgetUserFeatureArgs{}
  if err = args.Read(iprot); err != nil {
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("hgetUserFeature", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.Flush(ctx)
    return false, err
  }

  var err2 error
  retval, _ := p.handler.HgetUserFeature(ctx, args.Request)
  result := ServiceHgetUserFeatureResult{Success:retval}

  if err2 = oprot.WriteMessageBegin("hgetUserFeature", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serviceProcessorHsetUserFeature struct {
  handler Service
}

func (p *serviceProcessorHsetUserFeature) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceHsetUserFeatureArgs{}
  if err = args.Read(iprot); err != nil {
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("hsetUserFeature", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.Flush(ctx)
    return false, err
  }

  var err2 error
  retval, _ := p.handler.HsetUserFeature(ctx, args.Request)
  result := ServiceHsetUserFeatureResult{Success:retval}

  if err2 = oprot.WriteMessageBegin("hsetUserFeature", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }

  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serviceProcessorHmgetUserFeatures struct {
  handler Service
}

func (p *serviceProcessorHmgetUserFeatures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceHmgetUserFeaturesArgs{}
  if err = args.Read(iprot); err != nil {
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("hmgetUserFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.Flush(ctx)
    return false, err
  }

  var err2 error
  retval, _ := p.handler.HmgetUserFeatures(ctx, args.Request)
  result := ServiceHmgetUserFeaturesResult{Success:retval}

  if err2 = oprot.WriteMessageBegin("hmgetUserFeatures", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }

  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serviceProcessorHmsetUserFeatures struct {
  handler Service
}

func (p *serviceProcessorHmsetUserFeatures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceHmsetUserFeaturesArgs{}
  if err = args.Read(iprot); err != nil {
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("hmsetUserFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)

    oprot.Flush(ctx)
    return false, err
  }

  var err2 error
  retval, _ := p.handler.HmsetUserFeatures(ctx, args.Request)
  result := ServiceHmsetUserFeaturesResult{Success:retval}

  if err2 = oprot.WriteMessageBegin("hmsetUserFeatures", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }

  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type ServiceGetUserFeatureArgs struct {
  Request *GetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewServiceGetUserFeatureArgs() *ServiceGetUserFeatureArgs {
  return &ServiceGetUserFeatureArgs{}
}

var ServiceGetUserFeatureArgs_Request_DEFAULT *GetRequest
func (p *ServiceGetUserFeatureArgs) GetRequest() *GetRequest {
  if !p.IsSetRequest() {
    return ServiceGetUserFeatureArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ServiceGetUserFeatureArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ServiceGetUserFeatureArgs) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceGetUserFeatureArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &GetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ServiceGetUserFeatureArgs) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceGetUserFeatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }

  return err
}

func (p *ServiceGetUserFeatureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceGetUserFeatureArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceGetUserFeatureResult struct {
  Success *GetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceGetUserFeatureResult() *ServiceGetUserFeatureResult {
  return &ServiceGetUserFeatureResult{}
}

var ServiceGetUserFeatureResult_Success_DEFAULT *GetResponse
func (p *ServiceGetUserFeatureResult) GetSuccess() *GetResponse {
  if !p.IsSetSuccess() {
    return ServiceGetUserFeatureResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceGetUserFeatureResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceGetUserFeatureResult) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceGetUserFeatureResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceGetUserFeatureResult) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceGetUserFeatureResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }

  }
  return err
}

func (p *ServiceGetUserFeatureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceGetUserFeatureResult(%+v)", *p)
}

// Attributes:
//  - Request
type ServiceSetUserFeatureArgs struct {
  Request *SetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewServiceSetUserFeatureArgs() *ServiceSetUserFeatureArgs {
  return &ServiceSetUserFeatureArgs{}
}

var ServiceSetUserFeatureArgs_Request_DEFAULT *SetRequest
func (p *ServiceSetUserFeatureArgs) GetRequest() *SetRequest {
  if !p.IsSetRequest() {
    return ServiceSetUserFeatureArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ServiceSetUserFeatureArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ServiceSetUserFeatureArgs) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceSetUserFeatureArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ServiceSetUserFeatureArgs) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceSetUserFeatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }

  return err
}

func (p *ServiceSetUserFeatureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceSetUserFeatureArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceSetUserFeatureResult struct {
  Success *SetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceSetUserFeatureResult() *ServiceSetUserFeatureResult {
  return &ServiceSetUserFeatureResult{}
}

var ServiceSetUserFeatureResult_Success_DEFAULT *SetResponse
func (p *ServiceSetUserFeatureResult) GetSuccess() *SetResponse {
  if !p.IsSetSuccess() {
    return ServiceSetUserFeatureResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceSetUserFeatureResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceSetUserFeatureResult) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceSetUserFeatureResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceSetUserFeatureResult) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceSetUserFeatureResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }

  }
  return err
}

func (p *ServiceSetUserFeatureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceSetUserFeatureResult(%+v)", *p)
}

// Attributes:
//  - Request
type ServiceHgetUserFeatureArgs struct {
  Request *HgetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewServiceHgetUserFeatureArgs() *ServiceHgetUserFeatureArgs {
  return &ServiceHgetUserFeatureArgs{}
}

var ServiceHgetUserFeatureArgs_Request_DEFAULT *HgetRequest
func (p *ServiceHgetUserFeatureArgs) GetRequest() *HgetRequest {
  if !p.IsSetRequest() {
    return ServiceHgetUserFeatureArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ServiceHgetUserFeatureArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ServiceHgetUserFeatureArgs) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHgetUserFeatureArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &HgetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ServiceHgetUserFeatureArgs) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHgetUserFeatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }

  return err
}

func (p *ServiceHgetUserFeatureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHgetUserFeatureArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceHgetUserFeatureResult struct {
  Success *HgetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceHgetUserFeatureResult() *ServiceHgetUserFeatureResult {
  return &ServiceHgetUserFeatureResult{}
}

var ServiceHgetUserFeatureResult_Success_DEFAULT *HgetResponse
func (p *ServiceHgetUserFeatureResult) GetSuccess() *HgetResponse {
  if !p.IsSetSuccess() {
    return ServiceHgetUserFeatureResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceHgetUserFeatureResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceHgetUserFeatureResult) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHgetUserFeatureResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HgetResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceHgetUserFeatureResult) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHgetUserFeatureResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }

  }
  return err
}

func (p *ServiceHgetUserFeatureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHgetUserFeatureResult(%+v)", *p)
}

// Attributes:
//  - Request
type ServiceHsetUserFeatureArgs struct {
  Request *HsetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewServiceHsetUserFeatureArgs() *ServiceHsetUserFeatureArgs {
  return &ServiceHsetUserFeatureArgs{}
}

var ServiceHsetUserFeatureArgs_Request_DEFAULT *HsetRequest
func (p *ServiceHsetUserFeatureArgs) GetRequest() *HsetRequest {
  if !p.IsSetRequest() {
    return ServiceHsetUserFeatureArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ServiceHsetUserFeatureArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ServiceHsetUserFeatureArgs) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHsetUserFeatureArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &HsetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ServiceHsetUserFeatureArgs) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHsetUserFeatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }

  return err
}

func (p *ServiceHsetUserFeatureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHsetUserFeatureArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceHsetUserFeatureResult struct {
  Success *HsetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceHsetUserFeatureResult() *ServiceHsetUserFeatureResult {
  return &ServiceHsetUserFeatureResult{}
}

var ServiceHsetUserFeatureResult_Success_DEFAULT *HsetResponse
func (p *ServiceHsetUserFeatureResult) GetSuccess() *HsetResponse {
  if !p.IsSetSuccess() {
    return ServiceHsetUserFeatureResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceHsetUserFeatureResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceHsetUserFeatureResult) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHsetUserFeatureResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HsetResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceHsetUserFeatureResult) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHsetUserFeatureResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }

  }
  return err
}

func (p *ServiceHsetUserFeatureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHsetUserFeatureResult(%+v)", *p)
}

// Attributes:
//  - Request
type ServiceHmgetUserFeaturesArgs struct {
  Request *HmgetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewServiceHmgetUserFeaturesArgs() *ServiceHmgetUserFeaturesArgs {
  return &ServiceHmgetUserFeaturesArgs{}
}

var ServiceHmgetUserFeaturesArgs_Request_DEFAULT *HmgetRequest
func (p *ServiceHmgetUserFeaturesArgs) GetRequest() *HmgetRequest {
  if !p.IsSetRequest() {
    return ServiceHmgetUserFeaturesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ServiceHmgetUserFeaturesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ServiceHmgetUserFeaturesArgs) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHmgetUserFeaturesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &HmgetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ServiceHmgetUserFeaturesArgs) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHmgetUserFeaturesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }

  return err
}

func (p *ServiceHmgetUserFeaturesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHmgetUserFeaturesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceHmgetUserFeaturesResult struct {
  Success *HmgetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceHmgetUserFeaturesResult() *ServiceHmgetUserFeaturesResult {
  return &ServiceHmgetUserFeaturesResult{}
}

var ServiceHmgetUserFeaturesResult_Success_DEFAULT *HmgetResponse
func (p *ServiceHmgetUserFeaturesResult) GetSuccess() *HmgetResponse {
  if !p.IsSetSuccess() {
    return ServiceHmgetUserFeaturesResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceHmgetUserFeaturesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceHmgetUserFeaturesResult) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHmgetUserFeaturesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HmgetResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceHmgetUserFeaturesResult) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHmgetUserFeaturesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }

  }
  return err
}

func (p *ServiceHmgetUserFeaturesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHmgetUserFeaturesResult(%+v)", *p)
}

// Attributes:
//  - Request
type ServiceHmsetUserFeaturesArgs struct {
  Request *HmsetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewServiceHmsetUserFeaturesArgs() *ServiceHmsetUserFeaturesArgs {
  return &ServiceHmsetUserFeaturesArgs{}
}

var ServiceHmsetUserFeaturesArgs_Request_DEFAULT *HmsetRequest
func (p *ServiceHmsetUserFeaturesArgs) GetRequest() *HmsetRequest {
  if !p.IsSetRequest() {
    return ServiceHmsetUserFeaturesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ServiceHmsetUserFeaturesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ServiceHmsetUserFeaturesArgs) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHmsetUserFeaturesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &HmsetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ServiceHmsetUserFeaturesArgs) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHmsetUserFeaturesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }

  return err
}

func (p *ServiceHmsetUserFeaturesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHmsetUserFeaturesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceHmsetUserFeaturesResult struct {
  Success *HmsetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceHmsetUserFeaturesResult() *ServiceHmsetUserFeaturesResult {
  return &ServiceHmsetUserFeaturesResult{}
}

var ServiceHmsetUserFeaturesResult_Success_DEFAULT *HmsetResponse
func (p *ServiceHmsetUserFeaturesResult) GetSuccess() *HmsetResponse {
  if !p.IsSetSuccess() {
    return ServiceHmsetUserFeaturesResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceHmsetUserFeaturesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceHmsetUserFeaturesResult) Read(iprot thrift.TProtocol) error {
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
  }

  return nil
}

func (p *ServiceHmsetUserFeaturesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HmsetResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceHmsetUserFeaturesResult) Write(oprot thrift.TProtocol) error {
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }

  return nil
}

func (p *ServiceHmsetUserFeaturesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
  }
  return err
}

func (p *ServiceHmsetUserFeaturesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceHmsetUserFeaturesResult(%+v)", *p)
}


